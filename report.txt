Michael Wang and Justin Peek

1. From the user's perspective, they are playing the game of skee-ball in which they have 9 tries to rack up as many points as possible. The user is clicking, dragging, and releasing their mouse all below the line on the red ramp and the ball will go in a similar direction and speed towards the hole with a given amount of points. The user will see their score being accumulated depending on if they score points or not. After 9 balls and a certain amount of points being accumulated, they will see if they beat the current high score and are prompted with a message to play again and press p or quit and press q. 

2. From the programmer's perspective, their is a class which stores the values for number of balls the user has left to roll, the score that they are currently accumulated, and a highscore for when they finish the game, and will be stored for future games. The program uses the gfx library to create the skeeball interface and will first wait for the user to click their mouse. When the user clicks their mouse and drags a certain distance and releases the mouse, the program will calculate the points at which the mouse was clicked and released and find the distance and angle between them. A ball rolling up the ramp animation was set into effect after the mouse click release event was taken into effect. Based on the distance the mouse was clicked and released, a certain speed was given. The lowest speed could only obtain a max point value of 10, the second lowest speed 20, the medium speed 30, the second fastest speed 40, and the fastest could obtain a 50 or 100 point value depending on where the ball landed. The ball would only give the points if the entire ball was within each ellipse or else it would revert to the outer ellipse or area. If the ball landed outside the range of the board, it would give 0 points. After each ball was used, the gfx window would display one less ball on the side to indicate that a ball was used, and this was done using a for loop iterating the same number of times as number of balls and displaying the number of balls left. After each time a ball was used, the class would update the private variable. The same goes with score and highscore. After the user has 0 balls left, they would be allowed to press p which would reset the number of balls to 9, the score to 0, and reset the board, or q which would quit the program. The while loop after the user finishes a game will go on forever as long as the user doesn't press q or p so they can't try to roll another ball up the ramp. The original while loop will go as long as the user doesn't hit q mid game. 

3. We evaluated the program for correctness by clicking different places and dragging the mouse in differnt directions. We found that if the user clicked the mouse multiple times, the animation would show and finish for the first click before the next click causing some lag time, but this is a part of the gfx animation which can't be changed. We tested for the hit boxes of the different holes and speeds of the ball rolling and made sure that they correctly lined up to the corresponding point values. We made sure that the score updated each time, although it disappeared during the animation part because it wasn't being updated til after the animation, and also made sure the highscore was updated at the end of the game and remained until it was beaten. During the animation, the ball could lag a little and the animation was choppy, but the amount of points and score it gave, along with making sure the balls showing up on the skeeball board was correct. If the user tried to release the mouse past the line on the red ramp, no ball showed up which is how we wanted to implement our game. In real skeeball, it would be frowned upon to climb on the ramp and simply throw a ball right on top of a hole!
